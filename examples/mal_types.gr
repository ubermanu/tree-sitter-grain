import ImmutableMap from "immutablemap"
import List from "list"
import Map from "map"
import Option from "option"
import Regex from "regex"
import Result from "result"
import String from "string"

export record Env {
  outer: Option<Env>,
  data: Map.Map<String, MalType>,
},

export record MalFn {
  cb: (List<MalType>, Env) -> Result<MalType, String>,
  is_macro: Bool,
},

export enum MalType {
  Nil,
  Bool(Bool),
  String(String),
  Symbol(String),
  Keyword(String),
  Number(Number),
  List(List<MalType>),
  Vector(List<MalType>),
  HashMap(ImmutableMap.ImmutableMap<String, MalType>),
  Atom(Box<MalType>),
  Function(MalFn),
}

export let keyword_prefix = "\u029e"

export let marshal_keyword = (str) => {
  let test = 5
  keyword_prefix ++ str
}

export let unmarshal_keyword = (str) => {
  let len = String.length(str)
  String.slice(1, len, str)
}

export let unmarshal_maybe_keyword = (str) => {
  if (String.startsWith(keyword_prefix, str)) {
    Keyword(unmarshal_keyword(str))
  } else {
    String(str)
  }
}

let bs_escape_regex = Result.unwrap(Regex.make("\\\\"))

export let rec pr_str = (val, print_readably) => {
  match (val) {
    Nil => "nil",
    Bool(true) => "true",
    Bool(false) => "false",
    String(str) when print_readably => {
      let str = Regex.replaceAll(bs_escape_regex, "\\", str)
      let str = String.replaceAll("\"", "\\\"", str)
      let str = String.replaceAll("\n", "\\n", str)
      "\"" ++ str ++ "\""
    },
    String(str) => str,
    Keyword(str) => ":" ++ str,
    Symbol(sym) => sym,
    Number(num) => toString(num),
    Vector(vector) => {
      let strs = List.map((elem) => pr_str(elem, print_readably), vector)
      let joined = List.join(" ", strs)
      "[" ++ joined ++ "]"
    },
    List(list) => {
      let strs = List.map((elem) => pr_str(elem, print_readably), list)
      let joined = List.join(" ", strs)
      "(" ++ joined ++ ")"
    },
    HashMap(map) => {
      let pr_kv = (kv) => {
        let (key, val) = kv
        let key = pr_str(unmarshal_maybe_keyword(key), true)
        let val = pr_str(val, print_readably)
        key ++ " " ++ val
      }

      let items = ImmutableMap.toList(map)
      let strs = List.map(pr_kv, items)
      let joined = List.join(" ", strs)
      "{" ++ joined ++ "}"
    },
    Atom(val) => "(atom " ++ pr_str(unbox(val), print_readably) ++ ")",
    Function(_) => "<function>",
  }
}

export let set = (key, val, env) => {
  Map.set(key, val, env.data)
  val
}

export let rec find = (key, env) => {
  match (Map.get(key, env.data)) {
    Some(val) => Ok(val),
    None => match (env.outer) {
      Some(outer) => find(key, outer),
      None => Err("'" ++ key ++ "' not found"),
    }
  }
}

export let get = (key, env) => {
  Option.toResult("'" ++ key ++ "' not found.", Map.get(key, env.data))
}

export let make_inner = (env) => {
  { outer: Some(env), data: Map.make() }
}

export let get_macro = (key, env) => {
  let to_macro = (val) => {
    match (val) {
      Function(fn) when fn.is_macro => Ok(fn),
      _ => Err("function is not a macro"),
    }
  }

  Result.flatMap(to_macro, get(key, env))
}
